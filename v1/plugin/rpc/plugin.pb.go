/*
 Copyright (c) 2020 SolarWinds Worldwide, LLC

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/intelsdi-x/snap/control/plugin/rpc/plugin.proto

//lint:file-ignore SA1019 Ignore deprecated. Should be fixed by protoc generator.

package rpc

import (
	"context"
	"fmt"
	"math"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request that can be passed a stream collector
type CollectArg struct {
	// Request these metrics to be collected on the plugins schedule
	Metrics_Arg *MetricsArg `protobuf:"bytes,1,opt,name=Metrics_Arg,json=MetricsArg,proto3" json:"Metrics_Arg,omitempty"`
	// Set Maximum collection duration in ns. The events will be buffered
	// until the max duration is reached and/or the maxMetric buffer amount is
	// reached. 0 means the events will be sent immediately.
	MaxCollectDuration int64 `protobuf:"varint,2,opt,name=MaxCollectDuration,proto3" json:"MaxCollectDuration,omitempty"`
	// Set max number of metrics to buffer before forcing sending. Events
	// are sent as soon as MaxMetricsBuffer is reached or MaxCollectDuration
	// is exceeded, whichever happens first. If MaxMetricsBuffer is 0 metrics
	// will be sent immediately. If MaxCollectDuration is set to 0 then
	// maxMetricsBuffer will not be used as metrics will be sent immediately.
	MaxMetricsBuffer int64 `protobuf:"varint,3,opt,name=MaxMetricsBuffer,proto3" json:"MaxMetricsBuffer,omitempty"`
	// Blob of domain specific info
	Other                []byte   `protobuf:"bytes,4,opt,name=Other,proto3" json:"Other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectArg) Reset()         { *m = CollectArg{} }
func (m *CollectArg) String() string { return proto.CompactTextString(m) }
func (*CollectArg) ProtoMessage()    {}
func (*CollectArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{0}
}
func (m *CollectArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectArg.Unmarshal(m, b)
}
func (m *CollectArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectArg.Marshal(b, m, deterministic)
}
func (dst *CollectArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectArg.Merge(dst, src)
}
func (m *CollectArg) XXX_Size() int {
	return xxx_messageInfo_CollectArg.Size(m)
}
func (m *CollectArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectArg.DiscardUnknown(m)
}

var xxx_messageInfo_CollectArg proto.InternalMessageInfo

func (m *CollectArg) GetMetrics_Arg() *MetricsArg {
	if m != nil {
		return m.Metrics_Arg
	}
	return nil
}

func (m *CollectArg) GetMaxCollectDuration() int64 {
	if m != nil {
		return m.MaxCollectDuration
	}
	return 0
}

func (m *CollectArg) GetMaxMetricsBuffer() int64 {
	if m != nil {
		return m.MaxMetricsBuffer
	}
	return 0
}

func (m *CollectArg) GetOther() []byte {
	if m != nil {
		return m.Other
	}
	return nil
}

// Replies that can be sent from a stream collector
type CollectReply struct {
	// Reply with metrics
	Metrics_Reply        *MetricsReply `protobuf:"bytes,1,opt,name=Metrics_Reply,json=MetricsReply,proto3" json:"Metrics_Reply,omitempty"`
	Error                *ErrReply     `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CollectReply) Reset()         { *m = CollectReply{} }
func (m *CollectReply) String() string { return proto.CompactTextString(m) }
func (*CollectReply) ProtoMessage()    {}
func (*CollectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{1}
}
func (m *CollectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectReply.Unmarshal(m, b)
}
func (m *CollectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectReply.Marshal(b, m, deterministic)
}
func (dst *CollectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectReply.Merge(dst, src)
}
func (m *CollectReply) XXX_Size() int {
	return xxx_messageInfo_CollectReply.Size(m)
}
func (m *CollectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectReply.DiscardUnknown(m)
}

var xxx_messageInfo_CollectReply proto.InternalMessageInfo

func (m *CollectReply) GetMetrics_Reply() *MetricsReply {
	if m != nil {
		return m.Metrics_Reply
	}
	return nil
}

func (m *CollectReply) GetError() *ErrReply {
	if m != nil {
		return m.Error
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{2}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ErrReply struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrReply) Reset()         { *m = ErrReply{} }
func (m *ErrReply) String() string { return proto.CompactTextString(m) }
func (*ErrReply) ProtoMessage()    {}
func (*ErrReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{3}
}
func (m *ErrReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrReply.Unmarshal(m, b)
}
func (m *ErrReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrReply.Marshal(b, m, deterministic)
}
func (dst *ErrReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrReply.Merge(dst, src)
}
func (m *ErrReply) XXX_Size() int {
	return xxx_messageInfo_ErrReply.Size(m)
}
func (m *ErrReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrReply.DiscardUnknown(m)
}

var xxx_messageInfo_ErrReply proto.InternalMessageInfo

func (m *ErrReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Time struct {
	Sec                  int64    `protobuf:"varint,1,opt,name=sec,proto3" json:"sec,omitempty"`
	Nsec                 int64    `protobuf:"varint,2,opt,name=nsec,proto3" json:"nsec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{4}
}
func (m *Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Time.Unmarshal(m, b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Time.Marshal(b, m, deterministic)
}
func (dst *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(dst, src)
}
func (m *Time) XXX_Size() int {
	return xxx_messageInfo_Time.Size(m)
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Time) GetSec() int64 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *Time) GetNsec() int64 {
	if m != nil {
		return m.Nsec
	}
	return 0
}

type NamespaceElement struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamespaceElement) Reset()         { *m = NamespaceElement{} }
func (m *NamespaceElement) String() string { return proto.CompactTextString(m) }
func (*NamespaceElement) ProtoMessage()    {}
func (*NamespaceElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{5}
}
func (m *NamespaceElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamespaceElement.Unmarshal(m, b)
}
func (m *NamespaceElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamespaceElement.Marshal(b, m, deterministic)
}
func (dst *NamespaceElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceElement.Merge(dst, src)
}
func (m *NamespaceElement) XXX_Size() int {
	return xxx_messageInfo_NamespaceElement.Size(m)
}
func (m *NamespaceElement) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceElement.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceElement proto.InternalMessageInfo

func (m *NamespaceElement) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NamespaceElement) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NamespaceElement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PubProcArg struct {
	Metrics              []*Metric  `protobuf:"bytes,1,rep,name=Metrics,proto3" json:"Metrics,omitempty"`
	Config               *ConfigMap `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PubProcArg) Reset()         { *m = PubProcArg{} }
func (m *PubProcArg) String() string { return proto.CompactTextString(m) }
func (*PubProcArg) ProtoMessage()    {}
func (*PubProcArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{6}
}
func (m *PubProcArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubProcArg.Unmarshal(m, b)
}
func (m *PubProcArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubProcArg.Marshal(b, m, deterministic)
}
func (dst *PubProcArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubProcArg.Merge(dst, src)
}
func (m *PubProcArg) XXX_Size() int {
	return xxx_messageInfo_PubProcArg.Size(m)
}
func (m *PubProcArg) XXX_DiscardUnknown() {
	xxx_messageInfo_PubProcArg.DiscardUnknown(m)
}

var xxx_messageInfo_PubProcArg proto.InternalMessageInfo

func (m *PubProcArg) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *PubProcArg) GetConfig() *ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

// core.Metric
type Metric struct {
	Namespace          []*NamespaceElement `protobuf:"bytes,1,rep,name=Namespace,proto3" json:"Namespace,omitempty"`
	Version            int64               `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Config             *ConfigMap          `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
	LastAdvertisedTime *Time               `protobuf:"bytes,4,opt,name=LastAdvertisedTime,proto3" json:"LastAdvertisedTime,omitempty"`
	Tags               map[string]string   `protobuf:"bytes,5,rep,name=Tags,proto3" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp          *Time               `protobuf:"bytes,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Unit               string              `protobuf:"bytes,7,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Description        string              `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Metric_StringData
	//	*Metric_Float32Data
	//	*Metric_Float64Data
	//	*Metric_Int32Data
	//	*Metric_Int64Data
	//	*Metric_BytesData
	//	*Metric_BoolData
	//	*Metric_Uint32Data
	//	*Metric_Uint64Data
	Data                 isMetric_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{7}
}
func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (dst *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(dst, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetNamespace() []*NamespaceElement {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Metric) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Metric) GetConfig() *ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Metric) GetLastAdvertisedTime() *Time {
	if m != nil {
		return m.LastAdvertisedTime
	}
	return nil
}

func (m *Metric) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Metric) GetTimestamp() *Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Metric) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Metric) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type isMetric_Data interface {
	isMetric_Data()
}

type Metric_StringData struct {
	StringData string `protobuf:"bytes,9,opt,name=string_data,json=stringData,proto3,oneof"`
}

type Metric_Float32Data struct {
	Float32Data float32 `protobuf:"fixed32,10,opt,name=float32_data,json=float32Data,proto3,oneof"`
}

type Metric_Float64Data struct {
	Float64Data float64 `protobuf:"fixed64,11,opt,name=float64_data,json=float64Data,proto3,oneof"`
}

type Metric_Int32Data struct {
	Int32Data int32 `protobuf:"varint,12,opt,name=int32_data,json=int32Data,proto3,oneof"`
}

type Metric_Int64Data struct {
	Int64Data int64 `protobuf:"varint,13,opt,name=int64_data,json=int64Data,proto3,oneof"`
}

type Metric_BytesData struct {
	BytesData []byte `protobuf:"bytes,14,opt,name=bytes_data,json=bytesData,proto3,oneof"`
}

type Metric_BoolData struct {
	BoolData bool `protobuf:"varint,15,opt,name=bool_data,json=boolData,proto3,oneof"`
}

type Metric_Uint32Data struct {
	Uint32Data uint32 `protobuf:"varint,16,opt,name=uint32_data,json=uint32Data,proto3,oneof"`
}

type Metric_Uint64Data struct {
	Uint64Data uint64 `protobuf:"varint,17,opt,name=uint64_data,json=uint64Data,proto3,oneof"`
}

func (*Metric_StringData) isMetric_Data() {}

func (*Metric_Float32Data) isMetric_Data() {}

func (*Metric_Float64Data) isMetric_Data() {}

func (*Metric_Int32Data) isMetric_Data() {}

func (*Metric_Int64Data) isMetric_Data() {}

func (*Metric_BytesData) isMetric_Data() {}

func (*Metric_BoolData) isMetric_Data() {}

func (*Metric_Uint32Data) isMetric_Data() {}

func (*Metric_Uint64Data) isMetric_Data() {}

func (m *Metric) GetData() isMetric_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Metric) GetStringData() string {
	if x, ok := m.GetData().(*Metric_StringData); ok {
		return x.StringData
	}
	return ""
}

func (m *Metric) GetFloat32Data() float32 {
	if x, ok := m.GetData().(*Metric_Float32Data); ok {
		return x.Float32Data
	}
	return 0
}

func (m *Metric) GetFloat64Data() float64 {
	if x, ok := m.GetData().(*Metric_Float64Data); ok {
		return x.Float64Data
	}
	return 0
}

func (m *Metric) GetInt32Data() int32 {
	if x, ok := m.GetData().(*Metric_Int32Data); ok {
		return x.Int32Data
	}
	return 0
}

func (m *Metric) GetInt64Data() int64 {
	if x, ok := m.GetData().(*Metric_Int64Data); ok {
		return x.Int64Data
	}
	return 0
}

func (m *Metric) GetBytesData() []byte {
	if x, ok := m.GetData().(*Metric_BytesData); ok {
		return x.BytesData
	}
	return nil
}

func (m *Metric) GetBoolData() bool {
	if x, ok := m.GetData().(*Metric_BoolData); ok {
		return x.BoolData
	}
	return false
}

func (m *Metric) GetUint32Data() uint32 {
	if x, ok := m.GetData().(*Metric_Uint32Data); ok {
		return x.Uint32Data
	}
	return 0
}

func (m *Metric) GetUint64Data() uint64 {
	if x, ok := m.GetData().(*Metric_Uint64Data); ok {
		return x.Uint64Data
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Metric) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Metric_OneofMarshaler, _Metric_OneofUnmarshaler, _Metric_OneofSizer, []interface{}{
		(*Metric_StringData)(nil),
		(*Metric_Float32Data)(nil),
		(*Metric_Float64Data)(nil),
		(*Metric_Int32Data)(nil),
		(*Metric_Int64Data)(nil),
		(*Metric_BytesData)(nil),
		(*Metric_BoolData)(nil),
		(*Metric_Uint32Data)(nil),
		(*Metric_Uint64Data)(nil),
	}
}

func _Metric_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Metric)
	// data
	switch x := m.Data.(type) {
	case *Metric_StringData:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringData)
	case *Metric_Float32Data:
		b.EncodeVarint(10<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.Float32Data)))
	case *Metric_Float64Data:
		b.EncodeVarint(11<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Float64Data))
	case *Metric_Int32Data:
		b.EncodeVarint(12<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32Data))
	case *Metric_Int64Data:
		b.EncodeVarint(13<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Data))
	case *Metric_BytesData:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesData)
	case *Metric_BoolData:
		t := uint64(0)
		if x.BoolData {
			t = 1
		}
		b.EncodeVarint(15<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Metric_Uint32Data:
		b.EncodeVarint(16<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint32Data))
	case *Metric_Uint64Data:
		b.EncodeVarint(17<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint64Data))
	case nil:
	default:
		return fmt.Errorf("Metric.Value has unexpected type %T", x)
	}
	return nil
}

func _Metric_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Metric)
	switch tag {
	case 9: // data.string_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &Metric_StringData{x}
		return true, err
	case 10: // data.float32_data
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Data = &Metric_Float32Data{math.Float32frombits(uint32(x))}
		return true, err
	case 11: // data.float64_data
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Data = &Metric_Float64Data{math.Float64frombits(x)}
		return true, err
	case 12: // data.int32_data
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &Metric_Int32Data{int32(x)}
		return true, err
	case 13: // data.int64_data
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &Metric_Int64Data{int64(x)}
		return true, err
	case 14: // data.bytes_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Data = &Metric_BytesData{x}
		return true, err
	case 15: // data.bool_data
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &Metric_BoolData{x != 0}
		return true, err
	case 16: // data.uint32_data
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &Metric_Uint32Data{uint32(x)}
		return true, err
	case 17: // data.uint64_data
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &Metric_Uint64Data{x}
		return true, err
	default:
		return false, nil
	}
}

func _Metric_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Metric)
	// data
	switch x := m.Data.(type) {
	case *Metric_StringData:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringData)))
		n += len(x.StringData)
	case *Metric_Float32Data:
		n += 1 // tag and wire
		n += 4
	case *Metric_Float64Data:
		n += 1 // tag and wire
		n += 8
	case *Metric_Int32Data:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int32Data))
	case *Metric_Int64Data:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int64Data))
	case *Metric_BytesData:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.BytesData)))
		n += len(x.BytesData)
	case *Metric_BoolData:
		n += 1 // tag and wire
		n += 1
	case *Metric_Uint32Data:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint32Data))
	case *Metric_Uint64Data:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint64Data))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ConfigMap struct {
	IntMap    map[string]int64  `protobuf:"bytes,1,rep,name=IntMap,proto3" json:"IntMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringMap map[string]string `protobuf:"bytes,2,rep,name=StringMap,proto3" json:"StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// double is float64
	FloatMap             map[string]float64 `protobuf:"bytes,3,rep,name=FloatMap,proto3" json:"FloatMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BoolMap              map[string]bool    `protobuf:"bytes,4,rep,name=BoolMap,proto3" json:"BoolMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ConfigMap) Reset()         { *m = ConfigMap{} }
func (m *ConfigMap) String() string { return proto.CompactTextString(m) }
func (*ConfigMap) ProtoMessage()    {}
func (*ConfigMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{8}
}
func (m *ConfigMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigMap.Unmarshal(m, b)
}
func (m *ConfigMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigMap.Marshal(b, m, deterministic)
}
func (dst *ConfigMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMap.Merge(dst, src)
}
func (m *ConfigMap) XXX_Size() int {
	return xxx_messageInfo_ConfigMap.Size(m)
}
func (m *ConfigMap) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMap.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMap proto.InternalMessageInfo

func (m *ConfigMap) GetIntMap() map[string]int64 {
	if m != nil {
		return m.IntMap
	}
	return nil
}

func (m *ConfigMap) GetStringMap() map[string]string {
	if m != nil {
		return m.StringMap
	}
	return nil
}

func (m *ConfigMap) GetFloatMap() map[string]float64 {
	if m != nil {
		return m.FloatMap
	}
	return nil
}

func (m *ConfigMap) GetBoolMap() map[string]bool {
	if m != nil {
		return m.BoolMap
	}
	return nil
}

type KillArg struct {
	Reason               string   `protobuf:"bytes,1,opt,name=Reason,proto3" json:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KillArg) Reset()         { *m = KillArg{} }
func (m *KillArg) String() string { return proto.CompactTextString(m) }
func (*KillArg) ProtoMessage()    {}
func (*KillArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{9}
}
func (m *KillArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KillArg.Unmarshal(m, b)
}
func (m *KillArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KillArg.Marshal(b, m, deterministic)
}
func (dst *KillArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillArg.Merge(dst, src)
}
func (m *KillArg) XXX_Size() int {
	return xxx_messageInfo_KillArg.Size(m)
}
func (m *KillArg) XXX_DiscardUnknown() {
	xxx_messageInfo_KillArg.DiscardUnknown(m)
}

var xxx_messageInfo_KillArg proto.InternalMessageInfo

func (m *KillArg) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GetConfigPolicyReply struct {
	Error                string                    `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	BoolPolicy           map[string]*BoolPolicy    `protobuf:"bytes,2,rep,name=bool_policy,json=boolPolicy,proto3" json:"bool_policy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FloatPolicy          map[string]*FloatPolicy   `protobuf:"bytes,3,rep,name=float_policy,json=floatPolicy,proto3" json:"float_policy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntegerPolicy        map[string]*IntegerPolicy `protobuf:"bytes,4,rep,name=integer_policy,json=integerPolicy,proto3" json:"integer_policy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringPolicy         map[string]*StringPolicy  `protobuf:"bytes,5,rep,name=string_policy,json=stringPolicy,proto3" json:"string_policy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetConfigPolicyReply) Reset()         { *m = GetConfigPolicyReply{} }
func (m *GetConfigPolicyReply) String() string { return proto.CompactTextString(m) }
func (*GetConfigPolicyReply) ProtoMessage()    {}
func (*GetConfigPolicyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{10}
}
func (m *GetConfigPolicyReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigPolicyReply.Unmarshal(m, b)
}
func (m *GetConfigPolicyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigPolicyReply.Marshal(b, m, deterministic)
}
func (dst *GetConfigPolicyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigPolicyReply.Merge(dst, src)
}
func (m *GetConfigPolicyReply) XXX_Size() int {
	return xxx_messageInfo_GetConfigPolicyReply.Size(m)
}
func (m *GetConfigPolicyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigPolicyReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigPolicyReply proto.InternalMessageInfo

func (m *GetConfigPolicyReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetConfigPolicyReply) GetBoolPolicy() map[string]*BoolPolicy {
	if m != nil {
		return m.BoolPolicy
	}
	return nil
}

func (m *GetConfigPolicyReply) GetFloatPolicy() map[string]*FloatPolicy {
	if m != nil {
		return m.FloatPolicy
	}
	return nil
}

func (m *GetConfigPolicyReply) GetIntegerPolicy() map[string]*IntegerPolicy {
	if m != nil {
		return m.IntegerPolicy
	}
	return nil
}

func (m *GetConfigPolicyReply) GetStringPolicy() map[string]*StringPolicy {
	if m != nil {
		return m.StringPolicy
	}
	return nil
}

type BoolRule struct {
	Required             bool     `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	Default              bool     `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	HasDefault           bool     `protobuf:"varint,3,opt,name=has_default,json=hasDefault,proto3" json:"has_default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolRule) Reset()         { *m = BoolRule{} }
func (m *BoolRule) String() string { return proto.CompactTextString(m) }
func (*BoolRule) ProtoMessage()    {}
func (*BoolRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{11}
}
func (m *BoolRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolRule.Unmarshal(m, b)
}
func (m *BoolRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolRule.Marshal(b, m, deterministic)
}
func (dst *BoolRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolRule.Merge(dst, src)
}
func (m *BoolRule) XXX_Size() int {
	return xxx_messageInfo_BoolRule.Size(m)
}
func (m *BoolRule) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolRule.DiscardUnknown(m)
}

var xxx_messageInfo_BoolRule proto.InternalMessageInfo

func (m *BoolRule) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *BoolRule) GetDefault() bool {
	if m != nil {
		return m.Default
	}
	return false
}

func (m *BoolRule) GetHasDefault() bool {
	if m != nil {
		return m.HasDefault
	}
	return false
}

type BoolPolicy struct {
	Rules                map[string]*BoolRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Key                  []string             `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BoolPolicy) Reset()         { *m = BoolPolicy{} }
func (m *BoolPolicy) String() string { return proto.CompactTextString(m) }
func (*BoolPolicy) ProtoMessage()    {}
func (*BoolPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{12}
}
func (m *BoolPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolPolicy.Unmarshal(m, b)
}
func (m *BoolPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolPolicy.Marshal(b, m, deterministic)
}
func (dst *BoolPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolPolicy.Merge(dst, src)
}
func (m *BoolPolicy) XXX_Size() int {
	return xxx_messageInfo_BoolPolicy.Size(m)
}
func (m *BoolPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_BoolPolicy proto.InternalMessageInfo

func (m *BoolPolicy) GetRules() map[string]*BoolRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *BoolPolicy) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

type FloatRule struct {
	Required             bool     `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	Minimum              float64  `protobuf:"fixed64,2,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              float64  `protobuf:"fixed64,3,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Default              float64  `protobuf:"fixed64,4,opt,name=default,proto3" json:"default,omitempty"`
	HasDefault           bool     `protobuf:"varint,5,opt,name=has_default,json=hasDefault,proto3" json:"has_default,omitempty"`
	HasMin               bool     `protobuf:"varint,6,opt,name=has_min,json=hasMin,proto3" json:"has_min,omitempty"`
	HasMax               bool     `protobuf:"varint,7,opt,name=has_max,json=hasMax,proto3" json:"has_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FloatRule) Reset()         { *m = FloatRule{} }
func (m *FloatRule) String() string { return proto.CompactTextString(m) }
func (*FloatRule) ProtoMessage()    {}
func (*FloatRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{13}
}
func (m *FloatRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatRule.Unmarshal(m, b)
}
func (m *FloatRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatRule.Marshal(b, m, deterministic)
}
func (dst *FloatRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatRule.Merge(dst, src)
}
func (m *FloatRule) XXX_Size() int {
	return xxx_messageInfo_FloatRule.Size(m)
}
func (m *FloatRule) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatRule.DiscardUnknown(m)
}

var xxx_messageInfo_FloatRule proto.InternalMessageInfo

func (m *FloatRule) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *FloatRule) GetMinimum() float64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *FloatRule) GetMaximum() float64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *FloatRule) GetDefault() float64 {
	if m != nil {
		return m.Default
	}
	return 0
}

func (m *FloatRule) GetHasDefault() bool {
	if m != nil {
		return m.HasDefault
	}
	return false
}

func (m *FloatRule) GetHasMin() bool {
	if m != nil {
		return m.HasMin
	}
	return false
}

func (m *FloatRule) GetHasMax() bool {
	if m != nil {
		return m.HasMax
	}
	return false
}

type FloatPolicy struct {
	Rules                map[string]*FloatRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Key                  []string              `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FloatPolicy) Reset()         { *m = FloatPolicy{} }
func (m *FloatPolicy) String() string { return proto.CompactTextString(m) }
func (*FloatPolicy) ProtoMessage()    {}
func (*FloatPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{14}
}
func (m *FloatPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatPolicy.Unmarshal(m, b)
}
func (m *FloatPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatPolicy.Marshal(b, m, deterministic)
}
func (dst *FloatPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatPolicy.Merge(dst, src)
}
func (m *FloatPolicy) XXX_Size() int {
	return xxx_messageInfo_FloatPolicy.Size(m)
}
func (m *FloatPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_FloatPolicy proto.InternalMessageInfo

func (m *FloatPolicy) GetRules() map[string]*FloatRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *FloatPolicy) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

type IntegerRule struct {
	Required             bool     `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	Minimum              int64    `protobuf:"varint,2,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              int64    `protobuf:"varint,3,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Default              int64    `protobuf:"varint,4,opt,name=default,proto3" json:"default,omitempty"`
	HasDefault           bool     `protobuf:"varint,5,opt,name=has_default,json=hasDefault,proto3" json:"has_default,omitempty"`
	HasMin               bool     `protobuf:"varint,6,opt,name=has_min,json=hasMin,proto3" json:"has_min,omitempty"`
	HasMax               bool     `protobuf:"varint,7,opt,name=has_max,json=hasMax,proto3" json:"has_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegerRule) Reset()         { *m = IntegerRule{} }
func (m *IntegerRule) String() string { return proto.CompactTextString(m) }
func (*IntegerRule) ProtoMessage()    {}
func (*IntegerRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{15}
}
func (m *IntegerRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerRule.Unmarshal(m, b)
}
func (m *IntegerRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerRule.Marshal(b, m, deterministic)
}
func (dst *IntegerRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerRule.Merge(dst, src)
}
func (m *IntegerRule) XXX_Size() int {
	return xxx_messageInfo_IntegerRule.Size(m)
}
func (m *IntegerRule) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerRule.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerRule proto.InternalMessageInfo

func (m *IntegerRule) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *IntegerRule) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *IntegerRule) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *IntegerRule) GetDefault() int64 {
	if m != nil {
		return m.Default
	}
	return 0
}

func (m *IntegerRule) GetHasDefault() bool {
	if m != nil {
		return m.HasDefault
	}
	return false
}

func (m *IntegerRule) GetHasMin() bool {
	if m != nil {
		return m.HasMin
	}
	return false
}

func (m *IntegerRule) GetHasMax() bool {
	if m != nil {
		return m.HasMax
	}
	return false
}

type IntegerPolicy struct {
	Rules                map[string]*IntegerRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Key                  []string                `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IntegerPolicy) Reset()         { *m = IntegerPolicy{} }
func (m *IntegerPolicy) String() string { return proto.CompactTextString(m) }
func (*IntegerPolicy) ProtoMessage()    {}
func (*IntegerPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{16}
}
func (m *IntegerPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerPolicy.Unmarshal(m, b)
}
func (m *IntegerPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerPolicy.Marshal(b, m, deterministic)
}
func (dst *IntegerPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerPolicy.Merge(dst, src)
}
func (m *IntegerPolicy) XXX_Size() int {
	return xxx_messageInfo_IntegerPolicy.Size(m)
}
func (m *IntegerPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerPolicy proto.InternalMessageInfo

func (m *IntegerPolicy) GetRules() map[string]*IntegerRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *IntegerPolicy) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

type StringRule struct {
	Required             bool     `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	Default              string   `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty"`
	HasDefault           bool     `protobuf:"varint,3,opt,name=has_default,json=hasDefault,proto3" json:"has_default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringRule) Reset()         { *m = StringRule{} }
func (m *StringRule) String() string { return proto.CompactTextString(m) }
func (*StringRule) ProtoMessage()    {}
func (*StringRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{17}
}
func (m *StringRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringRule.Unmarshal(m, b)
}
func (m *StringRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringRule.Marshal(b, m, deterministic)
}
func (dst *StringRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringRule.Merge(dst, src)
}
func (m *StringRule) XXX_Size() int {
	return xxx_messageInfo_StringRule.Size(m)
}
func (m *StringRule) XXX_DiscardUnknown() {
	xxx_messageInfo_StringRule.DiscardUnknown(m)
}

var xxx_messageInfo_StringRule proto.InternalMessageInfo

func (m *StringRule) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *StringRule) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *StringRule) GetHasDefault() bool {
	if m != nil {
		return m.HasDefault
	}
	return false
}

type StringPolicy struct {
	Rules                map[string]*StringRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Key                  []string               `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StringPolicy) Reset()         { *m = StringPolicy{} }
func (m *StringPolicy) String() string { return proto.CompactTextString(m) }
func (*StringPolicy) ProtoMessage()    {}
func (*StringPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{18}
}
func (m *StringPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringPolicy.Unmarshal(m, b)
}
func (m *StringPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringPolicy.Marshal(b, m, deterministic)
}
func (dst *StringPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringPolicy.Merge(dst, src)
}
func (m *StringPolicy) XXX_Size() int {
	return xxx_messageInfo_StringPolicy.Size(m)
}
func (m *StringPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_StringPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_StringPolicy proto.InternalMessageInfo

func (m *StringPolicy) GetRules() map[string]*StringRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *StringPolicy) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

type MetricsArg struct {
	Metrics              []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MetricsArg) Reset()         { *m = MetricsArg{} }
func (m *MetricsArg) String() string { return proto.CompactTextString(m) }
func (*MetricsArg) ProtoMessage()    {}
func (*MetricsArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{19}
}
func (m *MetricsArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsArg.Unmarshal(m, b)
}
func (m *MetricsArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsArg.Marshal(b, m, deterministic)
}
func (dst *MetricsArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsArg.Merge(dst, src)
}
func (m *MetricsArg) XXX_Size() int {
	return xxx_messageInfo_MetricsArg.Size(m)
}
func (m *MetricsArg) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsArg.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsArg proto.InternalMessageInfo

func (m *MetricsArg) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type MetricsReply struct {
	Metrics              []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Error                string    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MetricsReply) Reset()         { *m = MetricsReply{} }
func (m *MetricsReply) String() string { return proto.CompactTextString(m) }
func (*MetricsReply) ProtoMessage()    {}
func (*MetricsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{20}
}
func (m *MetricsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsReply.Unmarshal(m, b)
}
func (m *MetricsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsReply.Marshal(b, m, deterministic)
}
func (dst *MetricsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsReply.Merge(dst, src)
}
func (m *MetricsReply) XXX_Size() int {
	return xxx_messageInfo_MetricsReply.Size(m)
}
func (m *MetricsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsReply.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsReply proto.InternalMessageInfo

func (m *MetricsReply) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *MetricsReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetMetricTypesArg struct {
	Config               *ConfigMap `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetMetricTypesArg) Reset()         { *m = GetMetricTypesArg{} }
func (m *GetMetricTypesArg) String() string { return proto.CompactTextString(m) }
func (*GetMetricTypesArg) ProtoMessage()    {}
func (*GetMetricTypesArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_plugin_653227c7775eaf74, []int{21}
}
func (m *GetMetricTypesArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricTypesArg.Unmarshal(m, b)
}
func (m *GetMetricTypesArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricTypesArg.Marshal(b, m, deterministic)
}
func (dst *GetMetricTypesArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricTypesArg.Merge(dst, src)
}
func (m *GetMetricTypesArg) XXX_Size() int {
	return xxx_messageInfo_GetMetricTypesArg.Size(m)
}
func (m *GetMetricTypesArg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricTypesArg.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricTypesArg proto.InternalMessageInfo

func (m *GetMetricTypesArg) GetConfig() *ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectArg)(nil), "rpc.CollectArg")
	proto.RegisterType((*CollectReply)(nil), "rpc.CollectReply")
	proto.RegisterType((*Empty)(nil), "rpc.Empty")
	proto.RegisterType((*ErrReply)(nil), "rpc.ErrReply")
	proto.RegisterType((*Time)(nil), "rpc.Time")
	proto.RegisterType((*NamespaceElement)(nil), "rpc.NamespaceElement")
	proto.RegisterType((*PubProcArg)(nil), "rpc.PubProcArg")
	proto.RegisterType((*Metric)(nil), "rpc.Metric")
	proto.RegisterMapType((map[string]string)(nil), "rpc.Metric.TagsEntry")
	proto.RegisterType((*ConfigMap)(nil), "rpc.ConfigMap")
	proto.RegisterMapType((map[string]bool)(nil), "rpc.ConfigMap.BoolMapEntry")
	proto.RegisterMapType((map[string]float64)(nil), "rpc.ConfigMap.FloatMapEntry")
	proto.RegisterMapType((map[string]int64)(nil), "rpc.ConfigMap.IntMapEntry")
	proto.RegisterMapType((map[string]string)(nil), "rpc.ConfigMap.StringMapEntry")
	proto.RegisterType((*KillArg)(nil), "rpc.KillArg")
	proto.RegisterType((*GetConfigPolicyReply)(nil), "rpc.GetConfigPolicyReply")
	proto.RegisterMapType((map[string]*BoolPolicy)(nil), "rpc.GetConfigPolicyReply.BoolPolicyEntry")
	proto.RegisterMapType((map[string]*FloatPolicy)(nil), "rpc.GetConfigPolicyReply.FloatPolicyEntry")
	proto.RegisterMapType((map[string]*IntegerPolicy)(nil), "rpc.GetConfigPolicyReply.IntegerPolicyEntry")
	proto.RegisterMapType((map[string]*StringPolicy)(nil), "rpc.GetConfigPolicyReply.StringPolicyEntry")
	proto.RegisterType((*BoolRule)(nil), "rpc.BoolRule")
	proto.RegisterType((*BoolPolicy)(nil), "rpc.BoolPolicy")
	proto.RegisterMapType((map[string]*BoolRule)(nil), "rpc.BoolPolicy.RulesEntry")
	proto.RegisterType((*FloatRule)(nil), "rpc.FloatRule")
	proto.RegisterType((*FloatPolicy)(nil), "rpc.FloatPolicy")
	proto.RegisterMapType((map[string]*FloatRule)(nil), "rpc.FloatPolicy.RulesEntry")
	proto.RegisterType((*IntegerRule)(nil), "rpc.IntegerRule")
	proto.RegisterType((*IntegerPolicy)(nil), "rpc.IntegerPolicy")
	proto.RegisterMapType((map[string]*IntegerRule)(nil), "rpc.IntegerPolicy.RulesEntry")
	proto.RegisterType((*StringRule)(nil), "rpc.StringRule")
	proto.RegisterType((*StringPolicy)(nil), "rpc.StringPolicy")
	proto.RegisterMapType((map[string]*StringRule)(nil), "rpc.StringPolicy.RulesEntry")
	proto.RegisterType((*MetricsArg)(nil), "rpc.MetricsArg")
	proto.RegisterType((*MetricsReply)(nil), "rpc.MetricsReply")
	proto.RegisterType((*GetMetricTypesArg)(nil), "rpc.GetMetricTypesArg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectorClient interface {
	CollectMetrics(ctx context.Context, in *MetricsArg, opts ...grpc.CallOption) (*MetricsReply, error)
	CollectMetricsAsStream(ctx context.Context, in *MetricsArg, opts ...grpc.CallOption) (Collector_CollectMetricsAsStreamClient, error)
	GetMetricTypes(ctx context.Context, in *GetMetricTypesArg, opts ...grpc.CallOption) (*MetricsReply, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrReply, error)
	Kill(ctx context.Context, in *KillArg, opts ...grpc.CallOption) (*ErrReply, error)
	GetConfigPolicy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) CollectMetrics(ctx context.Context, in *MetricsArg, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/rpc.Collector/CollectMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) CollectMetricsAsStream(ctx context.Context, in *MetricsArg, opts ...grpc.CallOption) (Collector_CollectMetricsAsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collector_serviceDesc.Streams[0], "/rpc.Collector/CollectMetricsAsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorCollectMetricsAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collector_CollectMetricsAsStreamClient interface {
	Recv() (*MetricsReply, error)
	grpc.ClientStream
}

type collectorCollectMetricsAsStreamClient struct {
	grpc.ClientStream
}

func (x *collectorCollectMetricsAsStreamClient) Recv() (*MetricsReply, error) {
	m := new(MetricsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorClient) GetMetricTypes(ctx context.Context, in *GetMetricTypesArg, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/rpc.Collector/GetMetricTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.Collector/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) Kill(ctx context.Context, in *KillArg, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.Collector/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) GetConfigPolicy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error) {
	out := new(GetConfigPolicyReply)
	err := c.cc.Invoke(ctx, "/rpc.Collector/GetConfigPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServer is the server API for Collector service.
type CollectorServer interface {
	CollectMetrics(context.Context, *MetricsArg) (*MetricsReply, error)
	CollectMetricsAsStream(*MetricsArg, Collector_CollectMetricsAsStreamServer) error
	GetMetricTypes(context.Context, *GetMetricTypesArg) (*MetricsReply, error)
	Ping(context.Context, *Empty) (*ErrReply, error)
	Kill(context.Context, *KillArg) (*ErrReply, error)
	GetConfigPolicy(context.Context, *Empty) (*GetConfigPolicyReply, error)
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_CollectMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).CollectMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/CollectMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).CollectMetrics(ctx, req.(*MetricsArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_CollectMetricsAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricsArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServer).CollectMetricsAsStream(m, &collectorCollectMetricsAsStreamServer{stream})
}

type Collector_CollectMetricsAsStreamServer interface {
	Send(*MetricsReply) error
	grpc.ServerStream
}

type collectorCollectMetricsAsStreamServer struct {
	grpc.ServerStream
}

func (x *collectorCollectMetricsAsStreamServer) Send(m *MetricsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Collector_GetMetricTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricTypesArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).GetMetricTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/GetMetricTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).GetMetricTypes(ctx, req.(*GetMetricTypesArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Kill(ctx, req.(*KillArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_GetConfigPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).GetConfigPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Collector/GetConfigPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).GetConfigPolicy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectMetrics",
			Handler:    _Collector_CollectMetrics_Handler,
		},
		{
			MethodName: "GetMetricTypes",
			Handler:    _Collector_GetMetricTypes_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Collector_Ping_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Collector_Kill_Handler,
		},
		{
			MethodName: "GetConfigPolicy",
			Handler:    _Collector_GetConfigPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CollectMetricsAsStream",
			Handler:       _Collector_CollectMetricsAsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessorClient interface {
	Process(ctx context.Context, in *PubProcArg, opts ...grpc.CallOption) (*MetricsReply, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrReply, error)
	Kill(ctx context.Context, in *KillArg, opts ...grpc.CallOption) (*ErrReply, error)
	GetConfigPolicy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error)
}

type processorClient struct {
	cc *grpc.ClientConn
}

func NewProcessorClient(cc *grpc.ClientConn) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) Process(ctx context.Context, in *PubProcArg, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/rpc.Processor/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.Processor/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) Kill(ctx context.Context, in *KillArg, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.Processor/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) GetConfigPolicy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error) {
	out := new(GetConfigPolicyReply)
	err := c.cc.Invoke(ctx, "/rpc.Processor/GetConfigPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessorServer is the server API for Processor service.
type ProcessorServer interface {
	Process(context.Context, *PubProcArg) (*MetricsReply, error)
	Ping(context.Context, *Empty) (*ErrReply, error)
	Kill(context.Context, *KillArg) (*ErrReply, error)
	GetConfigPolicy(context.Context, *Empty) (*GetConfigPolicyReply, error)
}

func RegisterProcessorServer(s *grpc.Server, srv ProcessorServer) {
	s.RegisterService(&_Processor_serviceDesc, srv)
}

func _Processor_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubProcArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Process(ctx, req.(*PubProcArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Kill(ctx, req.(*KillArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_GetConfigPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).GetConfigPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Processor/GetConfigPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).GetConfigPolicy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Processor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Processor_Process_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Processor_Ping_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Processor_Kill_Handler,
		},
		{
			MethodName: "GetConfigPolicy",
			Handler:    _Processor_GetConfigPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublisherClient interface {
	Publish(ctx context.Context, in *PubProcArg, opts ...grpc.CallOption) (*ErrReply, error)
	PublishAsStream(ctx context.Context, opts ...grpc.CallOption) (Publisher_PublishAsStreamClient, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrReply, error)
	Kill(ctx context.Context, in *KillArg, opts ...grpc.CallOption) (*ErrReply, error)
	GetConfigPolicy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error)
}

type publisherClient struct {
	cc *grpc.ClientConn
}

func NewPublisherClient(cc *grpc.ClientConn) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Publish(ctx context.Context, in *PubProcArg, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.Publisher/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) PublishAsStream(ctx context.Context, opts ...grpc.CallOption) (Publisher_PublishAsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Publisher_serviceDesc.Streams[0], "/rpc.Publisher/PublishAsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &publisherPublishAsStreamClient{stream}
	return x, nil
}

type Publisher_PublishAsStreamClient interface {
	Send(*PubProcArg) error
	CloseAndRecv() (*ErrReply, error)
	grpc.ClientStream
}

type publisherPublishAsStreamClient struct {
	grpc.ClientStream
}

func (x *publisherPublishAsStreamClient) Send(m *PubProcArg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publisherPublishAsStreamClient) CloseAndRecv() (*ErrReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ErrReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publisherClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.Publisher/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Kill(ctx context.Context, in *KillArg, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.Publisher/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) GetConfigPolicy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error) {
	out := new(GetConfigPolicyReply)
	err := c.cc.Invoke(ctx, "/rpc.Publisher/GetConfigPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServer is the server API for Publisher service.
type PublisherServer interface {
	Publish(context.Context, *PubProcArg) (*ErrReply, error)
	PublishAsStream(Publisher_PublishAsStreamServer) error
	Ping(context.Context, *Empty) (*ErrReply, error)
	Kill(context.Context, *KillArg) (*ErrReply, error)
	GetConfigPolicy(context.Context, *Empty) (*GetConfigPolicyReply, error)
}

func RegisterPublisherServer(s *grpc.Server, srv PublisherServer) {
	s.RegisterService(&_Publisher_serviceDesc, srv)
}

func _Publisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubProcArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Publish(ctx, req.(*PubProcArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_PublishAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublisherServer).PublishAsStream(&publisherPublishAsStreamServer{stream})
}

type Publisher_PublishAsStreamServer interface {
	SendAndClose(*ErrReply) error
	Recv() (*PubProcArg, error)
	grpc.ServerStream
}

type publisherPublishAsStreamServer struct {
	grpc.ServerStream
}

func (x *publisherPublishAsStreamServer) SendAndClose(m *ErrReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publisherPublishAsStreamServer) Recv() (*PubProcArg, error) {
	m := new(PubProcArg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Publisher_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Kill(ctx, req.(*KillArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_GetConfigPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).GetConfigPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Publisher/GetConfigPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).GetConfigPolicy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Publisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Publisher_Publish_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Publisher_Ping_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Publisher_Kill_Handler,
		},
		{
			MethodName: "GetConfigPolicy",
			Handler:    _Publisher_GetConfigPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishAsStream",
			Handler:       _Publisher_PublishAsStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

// StreamCollectorClient is the client API for StreamCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamCollectorClient interface {
	StreamMetrics(ctx context.Context, opts ...grpc.CallOption) (StreamCollector_StreamMetricsClient, error)
	GetMetricTypes(ctx context.Context, in *GetMetricTypesArg, opts ...grpc.CallOption) (*MetricsReply, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrReply, error)
	Kill(ctx context.Context, in *KillArg, opts ...grpc.CallOption) (*ErrReply, error)
	GetConfigPolicy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error)
}

type streamCollectorClient struct {
	cc *grpc.ClientConn
}

func NewStreamCollectorClient(cc *grpc.ClientConn) StreamCollectorClient {
	return &streamCollectorClient{cc}
}

func (c *streamCollectorClient) StreamMetrics(ctx context.Context, opts ...grpc.CallOption) (StreamCollector_StreamMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamCollector_serviceDesc.Streams[0], "/rpc.StreamCollector/StreamMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamCollectorStreamMetricsClient{stream}
	return x, nil
}

type StreamCollector_StreamMetricsClient interface {
	Send(*CollectArg) error
	Recv() (*CollectReply, error)
	grpc.ClientStream
}

type streamCollectorStreamMetricsClient struct {
	grpc.ClientStream
}

func (x *streamCollectorStreamMetricsClient) Send(m *CollectArg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamCollectorStreamMetricsClient) Recv() (*CollectReply, error) {
	m := new(CollectReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamCollectorClient) GetMetricTypes(ctx context.Context, in *GetMetricTypesArg, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/rpc.StreamCollector/GetMetricTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamCollectorClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.StreamCollector/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamCollectorClient) Kill(ctx context.Context, in *KillArg, opts ...grpc.CallOption) (*ErrReply, error) {
	out := new(ErrReply)
	err := c.cc.Invoke(ctx, "/rpc.StreamCollector/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamCollectorClient) GetConfigPolicy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigPolicyReply, error) {
	out := new(GetConfigPolicyReply)
	err := c.cc.Invoke(ctx, "/rpc.StreamCollector/GetConfigPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamCollectorServer is the server API for StreamCollector service.
type StreamCollectorServer interface {
	StreamMetrics(StreamCollector_StreamMetricsServer) error
	GetMetricTypes(context.Context, *GetMetricTypesArg) (*MetricsReply, error)
	Ping(context.Context, *Empty) (*ErrReply, error)
	Kill(context.Context, *KillArg) (*ErrReply, error)
	GetConfigPolicy(context.Context, *Empty) (*GetConfigPolicyReply, error)
}

func RegisterStreamCollectorServer(s *grpc.Server, srv StreamCollectorServer) {
	s.RegisterService(&_StreamCollector_serviceDesc, srv)
}

func _StreamCollector_StreamMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamCollectorServer).StreamMetrics(&streamCollectorStreamMetricsServer{stream})
}

type StreamCollector_StreamMetricsServer interface {
	Send(*CollectReply) error
	Recv() (*CollectArg, error)
	grpc.ServerStream
}

type streamCollectorStreamMetricsServer struct {
	grpc.ServerStream
}

func (x *streamCollectorStreamMetricsServer) Send(m *CollectReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamCollectorStreamMetricsServer) Recv() (*CollectArg, error) {
	m := new(CollectArg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamCollector_GetMetricTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricTypesArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamCollectorServer).GetMetricTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.StreamCollector/GetMetricTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamCollectorServer).GetMetricTypes(ctx, req.(*GetMetricTypesArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamCollector_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamCollectorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.StreamCollector/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamCollectorServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamCollector_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamCollectorServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.StreamCollector/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamCollectorServer).Kill(ctx, req.(*KillArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamCollector_GetConfigPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamCollectorServer).GetConfigPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.StreamCollector/GetConfigPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamCollectorServer).GetConfigPolicy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.StreamCollector",
	HandlerType: (*StreamCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricTypes",
			Handler:    _StreamCollector_GetMetricTypes_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _StreamCollector_Ping_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _StreamCollector_Kill_Handler,
		},
		{
			MethodName: "GetConfigPolicy",
			Handler:    _StreamCollector_GetConfigPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMetrics",
			Handler:       _StreamCollector_StreamMetrics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

func init() { proto.RegisterFile("plugin.proto", fileDescriptor_plugin_653227c7775eaf74) }

var fileDescriptor_plugin_653227c7775eaf74 = []byte{
	// 1493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x4b, 0x6f, 0xdb, 0xc6,
	0x16, 0x16, 0x45, 0xbd, 0x78, 0x28, 0xc9, 0xf6, 0x20, 0x37, 0x57, 0x57, 0x49, 0x10, 0x85, 0xbe,
	0x4e, 0x94, 0x07, 0x74, 0x73, 0xe5, 0xc4, 0xcd, 0xa3, 0x05, 0xea, 0xc4, 0x6e, 0x9c, 0xa4, 0x4a,
	0x0d, 0xc6, 0xcd, 0xa6, 0x40, 0x83, 0xb1, 0x3c, 0x96, 0x89, 0x50, 0x24, 0x3b, 0x24, 0x03, 0xeb,
	0x77, 0x74, 0x55, 0xa0, 0x40, 0x81, 0xfe, 0x82, 0xae, 0xbb, 0xee, 0xa2, 0x28, 0xfa, 0x1f, 0xfa,
	0x33, 0xba, 0x2d, 0xe6, 0x41, 0x71, 0x48, 0x49, 0x7e, 0x2c, 0x0a, 0x04, 0xdd, 0x71, 0xce, 0xf9,
	0xce, 0xa7, 0x39, 0xdf, 0x39, 0x67, 0xc8, 0x11, 0xd4, 0x03, 0x37, 0x1e, 0x39, 0x5e, 0x2f, 0xa0,
	0x7e, 0xe4, 0x23, 0x9d, 0x06, 0x43, 0xeb, 0x27, 0x0d, 0xe0, 0xa9, 0xef, 0xba, 0x64, 0x18, 0x6d,
	0xd2, 0x11, 0xba, 0x0b, 0xe6, 0x80, 0x44, 0xd4, 0x19, 0x86, 0x6f, 0x37, 0xe9, 0xa8, 0xa5, 0x75,
	0xb4, 0xae, 0xd9, 0x5f, 0xea, 0xd1, 0x60, 0xd8, 0x93, 0xf6, 0x4d, 0x3a, 0xb2, 0x21, 0x7d, 0x46,
	0x3d, 0x40, 0x03, 0x7c, 0x2c, 0x29, 0xb6, 0x62, 0x8a, 0x23, 0xc7, 0xf7, 0x5a, 0xc5, 0x8e, 0xd6,
	0xd5, 0xed, 0x39, 0x1e, 0x74, 0x0b, 0x96, 0x07, 0xf8, 0x58, 0x12, 0x3c, 0x89, 0x0f, 0x0f, 0x09,
	0x6d, 0xe9, 0x1c, 0x3d, 0x63, 0x47, 0x17, 0xa0, 0xfc, 0x45, 0x74, 0x44, 0x68, 0xab, 0xd4, 0xd1,
	0xba, 0x75, 0x5b, 0x2c, 0xac, 0x77, 0x50, 0x97, 0xa4, 0x36, 0x09, 0xdc, 0x09, 0xda, 0x80, 0x46,
	0xb2, 0x67, 0x6e, 0x90, 0xbb, 0x5e, 0x51, 0x77, 0xcd, 0x1d, 0x76, 0x5d, 0x5d, 0xa1, 0x55, 0x28,
	0x6f, 0x53, 0xea, 0x53, 0xbe, 0x59, 0xb3, 0xdf, 0xe0, 0xf8, 0x6d, 0x4a, 0x05, 0x56, 0xf8, 0xac,
	0x2a, 0x94, 0xb7, 0xc7, 0x41, 0x34, 0xb1, 0x3a, 0x50, 0x4b, 0x7c, 0x6c, 0x5f, 0x84, 0x47, 0xb2,
	0x5f, 0x32, 0x6c, 0xb1, 0xb0, 0xee, 0x40, 0x69, 0xcf, 0x19, 0x13, 0xb4, 0x0c, 0x7a, 0x48, 0x86,
	0xdc, 0xa7, 0xdb, 0xec, 0x11, 0x21, 0x28, 0x79, 0xcc, 0x24, 0x54, 0xe1, 0xcf, 0xd6, 0xd7, 0xb0,
	0xfc, 0x0a, 0x8f, 0x49, 0x18, 0xe0, 0x21, 0xd9, 0x76, 0xc9, 0x98, 0x78, 0x11, 0xe3, 0x7d, 0x83,
	0xdd, 0x98, 0x24, 0xbc, 0x7c, 0x81, 0x3a, 0x60, 0x6e, 0x91, 0x70, 0x48, 0x9d, 0x60, 0x2a, 0xad,
	0x61, 0xab, 0x26, 0xc6, 0xcf, 0xb8, 0xb8, 0x8e, 0x86, 0xcd, 0x9f, 0xad, 0xaf, 0x00, 0x76, 0xe3,
	0xfd, 0x5d, 0xea, 0x0f, 0x59, 0x95, 0xd6, 0xa0, 0x2a, 0x73, 0x6f, 0x69, 0x1d, 0xbd, 0x6b, 0xf6,
	0x4d, 0x45, 0x1d, 0x3b, 0xf1, 0xa1, 0xeb, 0x50, 0x79, 0xea, 0x7b, 0x87, 0xce, 0x48, 0x6a, 0xd2,
	0xe4, 0x28, 0x61, 0x1a, 0xe0, 0xc0, 0x96, 0x5e, 0xeb, 0xe7, 0x32, 0x54, 0x44, 0x0c, 0x5a, 0x07,
	0x63, 0x9a, 0x87, 0xe4, 0xfe, 0x17, 0x8f, 0xca, 0x67, 0x67, 0xa7, 0x38, 0xd4, 0x82, 0xea, 0x1b,
	0x42, 0xc3, 0xb4, 0x53, 0x92, 0xa5, 0xb2, 0x03, 0xfd, 0xa4, 0x1d, 0xa0, 0x87, 0x80, 0x3e, 0xc7,
	0x61, 0xb4, 0x79, 0xf0, 0x9e, 0xd0, 0xc8, 0x09, 0xc9, 0x01, 0x93, 0x9e, 0xf7, 0x89, 0xd9, 0x37,
	0x78, 0x0c, 0x33, 0xd8, 0x73, 0x40, 0xe8, 0x26, 0x94, 0xf6, 0xf0, 0x28, 0x6c, 0x95, 0x95, 0xcd,
	0x8a, 0x64, 0x7a, 0xcc, 0xbe, 0xed, 0x45, 0x74, 0x62, 0x73, 0x08, 0xba, 0x01, 0x06, 0x0b, 0x09,
	0x23, 0x3c, 0x0e, 0x5a, 0x95, 0x3c, 0x79, 0xea, 0x63, 0x15, 0xf8, 0xd2, 0x73, 0xa2, 0x56, 0x55,
	0x54, 0x80, 0x3d, 0xe7, 0xeb, 0x56, 0x9b, 0xad, 0xdb, 0x35, 0x30, 0xc3, 0x88, 0x3a, 0xde, 0xe8,
	0xed, 0x01, 0x8e, 0x70, 0xcb, 0x60, 0x88, 0x9d, 0x82, 0x0d, 0xc2, 0xb8, 0x85, 0x23, 0x8c, 0x56,
	0xa1, 0x7e, 0xe8, 0xfa, 0x38, 0x5a, 0xef, 0x0b, 0x0c, 0x74, 0xb4, 0x6e, 0x71, 0xa7, 0x60, 0x9b,
	0xd2, 0x9a, 0x01, 0x6d, 0xdc, 0x13, 0x20, 0xb3, 0xa3, 0x75, 0xb5, 0x29, 0x68, 0xe3, 0x1e, 0x07,
	0x5d, 0x05, 0x70, 0xbc, 0x29, 0x4f, 0xbd, 0xa3, 0x75, 0xcb, 0x3b, 0x05, 0xdb, 0xe0, 0x36, 0x05,
	0x90, 0x70, 0x34, 0x58, 0x5d, 0x24, 0x20, 0x65, 0xd8, 0x9f, 0x44, 0x24, 0x14, 0x80, 0x26, 0x9b,
	0x49, 0x06, 0xe0, 0x36, 0x0e, 0xb8, 0x02, 0xc6, 0xbe, 0xef, 0xbb, 0xc2, 0xbf, 0xd4, 0xd1, 0xba,
	0xb5, 0x9d, 0x82, 0x5d, 0x63, 0x26, 0xee, 0xbe, 0x06, 0x66, 0xac, 0x6c, 0x61, 0xb9, 0xa3, 0x75,
	0x1b, 0x2c, 0xdd, 0x38, 0xdd, 0x83, 0x84, 0x24, 0x9b, 0x58, 0xe9, 0x68, 0xdd, 0x52, 0x02, 0x11,
	0xbb, 0x68, 0x7f, 0x04, 0xc6, 0xb4, 0x4c, 0x6c, 0xd6, 0xde, 0x91, 0x89, 0x9c, 0x17, 0xf6, 0xc8,
	0x66, 0xe8, 0x3d, 0x9f, 0x21, 0x31, 0x27, 0x62, 0xf1, 0xa8, 0xf8, 0x40, 0x7b, 0x52, 0x81, 0x12,
	0x23, 0xb5, 0xfe, 0xd0, 0xc1, 0x98, 0x36, 0x14, 0xea, 0x43, 0xe5, 0xb9, 0x17, 0x0d, 0x70, 0x20,
	0x9b, 0xb7, 0x9d, 0x6d, 0xb8, 0x9e, 0x70, 0x8a, 0xa6, 0x90, 0x48, 0xf4, 0x18, 0x8c, 0xd7, 0xbc,
	0x44, 0x2c, 0xac, 0xc8, 0xc3, 0xae, 0xe4, 0xc2, 0xa6, 0x7e, 0x11, 0x99, 0xe2, 0xd1, 0x03, 0xa8,
	0x7d, 0xc6, 0xca, 0xc2, 0x62, 0x75, 0x1e, 0x7b, 0x39, 0x17, 0x9b, 0xb8, 0x45, 0xe8, 0x14, 0x8d,
	0xee, 0x43, 0xf5, 0x89, 0xef, 0xbb, 0x2c, 0xb0, 0xc4, 0x03, 0x2f, 0xe5, 0x02, 0xa5, 0x57, 0xc4,
	0x25, 0xd8, 0xf6, 0x43, 0x30, 0x95, 0x24, 0x4e, 0x93, 0x4c, 0x57, 0x24, 0x6b, 0x7f, 0x0c, 0xcd,
	0x6c, 0x22, 0xe7, 0x11, 0xbc, 0xfd, 0x18, 0x1a, 0x99, 0x54, 0x4e, 0x0b, 0xd6, 0xd4, 0xe0, 0x47,
	0x50, 0x57, 0xd3, 0x39, 0x2d, 0xb6, 0xa6, 0xc4, 0x5a, 0xd7, 0xa0, 0xfa, 0xd2, 0x71, 0x5d, 0x76,
	0xf0, 0x5d, 0x84, 0x8a, 0x4d, 0x70, 0xe8, 0x7b, 0x32, 0x52, 0xae, 0xd8, 0x09, 0x76, 0xe1, 0x19,
	0x89, 0x84, 0x76, 0xbb, 0xbe, 0xeb, 0x0c, 0x27, 0x27, 0x9c, 0xed, 0xe8, 0x05, 0x98, 0xbc, 0xb3,
	0x03, 0x8e, 0x94, 0x35, 0xbf, 0xc9, 0xe5, 0x9f, 0xc7, 0xc2, 0x2b, 0x21, 0xd6, 0xa2, 0x18, 0xb0,
	0x3f, 0x35, 0xa0, 0x81, 0x9c, 0xd6, 0x84, 0x4c, 0x34, 0xc1, 0xad, 0xc5, 0x64, 0x5c, 0x44, 0x95,
	0x4d, 0xcc, 0xb5, 0xa4, 0x7b, 0x0d, 0x4d, 0xc7, 0x8b, 0xc8, 0x88, 0xd0, 0x84, 0x50, 0x34, 0xc7,
	0x9d, 0xc5, 0x84, 0xcf, 0x05, 0x5e, 0xa5, 0x6c, 0x38, 0xaa, 0x0d, 0xed, 0x42, 0x43, 0x9e, 0x4c,
	0x92, 0x53, 0x1c, 0x96, 0xb7, 0x17, 0x73, 0x8a, 0x3e, 0x51, 0x29, 0xeb, 0xa1, 0x62, 0x6a, 0xbf,
	0x82, 0xa5, 0x9c, 0x28, 0x73, 0x4a, 0xba, 0xa6, 0x96, 0x34, 0xf9, 0xf0, 0x48, 0xc3, 0xd4, 0xfe,
	0xd8, 0x85, 0xe5, 0xbc, 0x2e, 0x73, 0x08, 0xaf, 0x67, 0x09, 0x97, 0x39, 0xa1, 0x12, 0xa7, 0x32,
	0xee, 0x01, 0x9a, 0x15, 0x66, 0x0e, 0x67, 0x37, 0xcb, 0x89, 0x38, 0x67, 0x26, 0x52, 0x65, 0xb5,
	0x61, 0x65, 0x46, 0x9a, 0x39, 0xa4, 0x37, 0xb2, 0xa4, 0xe2, 0xe3, 0x45, 0x0d, 0x54, 0xfb, 0x1b,
	0x43, 0x8d, 0x89, 0x62, 0xc7, 0x2e, 0x41, 0x6d, 0xa8, 0x51, 0xf2, 0x4d, 0xec, 0x50, 0x72, 0xc0,
	0xf9, 0x6a, 0xf6, 0x74, 0xcd, 0x5e, 0xb3, 0x07, 0xe4, 0x10, 0xc7, 0x6e, 0x24, 0x67, 0x24, 0x59,
	0xa2, 0xab, 0x60, 0x1e, 0xe1, 0xf0, 0x6d, 0xe2, 0xd5, 0xb9, 0x17, 0x8e, 0x70, 0xb8, 0x25, 0x2c,
	0xd6, 0x77, 0x1a, 0x40, 0x2a, 0x3c, 0xba, 0x0b, 0x65, 0x1a, 0xbb, 0x24, 0xcc, 0x1c, 0x92, 0xa9,
	0xbf, 0xc7, 0xb6, 0x22, 0xdf, 0x9c, 0x02, 0x98, 0xa4, 0xc8, 0x26, 0x45, 0xa4, 0xd8, 0x7e, 0x06,
	0x90, 0xc2, 0xe6, 0x48, 0xb0, 0x9a, 0x95, 0xa0, 0x31, 0xfd, 0x0d, 0x16, 0xa5, 0xa6, 0xff, 0xab,
	0x06, 0x06, 0xaf, 0xe1, 0x59, 0x04, 0x18, 0x3b, 0x9e, 0x33, 0x8e, 0xc7, 0xf2, 0x80, 0x49, 0x96,
	0xdc, 0x83, 0x8f, 0xb9, 0x47, 0x97, 0x1e, 0xb1, 0x54, 0x45, 0x2b, 0x09, 0xcf, 0x02, 0xd1, 0xca,
	0x79, 0xd1, 0xd0, 0xbf, 0xa1, 0xca, 0x00, 0x63, 0xc7, 0xe3, 0x1f, 0x0b, 0x35, 0xbb, 0x72, 0x84,
	0xc3, 0x81, 0xe3, 0x4d, 0x1d, 0xf8, 0x98, 0x7f, 0x21, 0x48, 0x07, 0x3e, 0xb6, 0xbe, 0xd7, 0xc0,
	0x54, 0xda, 0x11, 0xfd, 0x3f, 0xab, 0xf3, 0xa5, 0x7c, 0xbf, 0x9e, 0x49, 0xe8, 0x9d, 0x53, 0x84,
	0xfe, 0x6f, 0x56, 0xe8, 0x66, 0xfa, 0x23, 0x79, 0xa5, 0x7f, 0xd3, 0xf8, 0xbb, 0x83, 0x75, 0xf6,
	0x79, 0xb5, 0xd6, 0x17, 0x6a, 0xad, 0x2f, 0xd4, 0x5a, 0xff, 0x5b, 0xb5, 0xfe, 0x51, 0x83, 0x46,
	0x66, 0x4c, 0xd1, 0x7a, 0x56, 0xed, 0x2b, 0xb3, 0x93, 0x7c, 0x26, 0xbd, 0x5f, 0x9c, 0xa2, 0xf7,
	0xdc, 0x43, 0x48, 0x91, 0x55, 0x55, 0x7c, 0x08, 0x20, 0xa6, 0xfe, 0xbc, 0xc3, 0x6d, 0x9c, 0x63,
	0xb8, 0x7f, 0xd0, 0xa0, 0xae, 0x9e, 0x2d, 0xa8, 0x9f, 0x15, 0xe2, 0xf2, 0xcc, 0xe9, 0x73, 0x26,
	0x1d, 0x9e, 0x9f, 0xa2, 0xc3, 0xdc, 0xd3, 0x3d, 0xcd, 0x56, 0x95, 0x61, 0x1d, 0xd4, 0x3b, 0xe6,
	0x1a, 0x54, 0xc7, 0x27, 0xdc, 0x5e, 0xa4, 0xcf, 0x7a, 0x09, 0xd9, 0x0b, 0xde, 0xd9, 0xc2, 0xd2,
	0x37, 0x7e, 0x51, 0xbd, 0xcd, 0x3d, 0x86, 0x95, 0x67, 0x24, 0x12, 0xd8, 0xbd, 0x49, 0x40, 0xf8,
	0x46, 0xae, 0x43, 0x65, 0x28, 0x6e, 0x27, 0xda, 0xfc, 0xdb, 0x89, 0xf0, 0xf6, 0x7f, 0x2f, 0xb2,
	0x4f, 0x4c, 0x7e, 0x47, 0xf5, 0x29, 0xda, 0x80, 0xa6, 0x5c, 0x24, 0xf7, 0xac, 0xfc, 0x8d, 0xba,
	0x3d, 0x7b, 0x59, 0xb5, 0x0a, 0xe8, 0x53, 0xb8, 0x98, 0x8d, 0xdb, 0x0c, 0x5f, 0x47, 0x94, 0xe0,
	0xf1, 0xd9, 0xe2, 0xef, 0x6a, 0xe8, 0x13, 0x68, 0x66, 0x93, 0x40, 0x17, 0x93, 0x37, 0x78, 0x36,
	0xb3, 0xf9, 0x1b, 0x58, 0x85, 0xd2, 0xae, 0xe3, 0x8d, 0x10, 0x88, 0xab, 0x31, 0xbb, 0x07, 0xb7,
	0xb3, 0xd7, 0x64, 0xab, 0x80, 0xd6, 0xa0, 0xc4, 0x3e, 0xb6, 0x50, 0x9d, 0x3b, 0xe4, 0x77, 0xd7,
	0x2c, 0xec, 0x11, 0x2c, 0xe5, 0xbe, 0x1b, 0x32, 0xb4, 0xff, 0x59, 0xf8, 0x65, 0x61, 0x15, 0xfa,
	0xbf, 0x68, 0x60, 0xb0, 0x9b, 0x2c, 0x09, 0x43, 0x9f, 0xa2, 0xff, 0x41, 0x55, 0x2e, 0xa4, 0x0e,
	0xe9, 0x3d, 0xf7, 0xc3, 0x4e, 0xe3, 0x4f, 0x96, 0x46, 0xbc, 0xef, 0x3a, 0xe1, 0x11, 0xa1, 0xe8,
	0x36, 0x54, 0xe5, 0x62, 0x36, 0x8d, 0x99, 0x9f, 0xbd, 0x0f, 0x4b, 0x12, 0x9c, 0xeb, 0x81, 0x13,
	0x82, 0xba, 0xda, 0x07, 0x93, 0xf9, 0xb7, 0x45, 0x58, 0x12, 0xdb, 0x4e, 0xa7, 0xe2, 0x21, 0x34,
	0x84, 0x29, 0x3b, 0x14, 0xe9, 0x9f, 0x51, 0xb2, 0x98, 0xea, 0x7f, 0x3d, 0x2c, 0xa9, 0x7f, 0x4c,
	0x5b, 0xef, 0x57, 0xf8, 0xff, 0x70, 0xeb, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x35, 0x97,
	0x30, 0x97, 0x13, 0x00, 0x00,
}
