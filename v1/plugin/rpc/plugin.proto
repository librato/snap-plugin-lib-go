/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package rpc;

service Collector {
    rpc CollectMetrics(MetricsArg) returns (MetricsReply) {}
    rpc CollectMetricsAsStream(MetricsArg) returns (stream MetricsReply) {}
    rpc GetMetricTypes(GetMetricTypesArg) returns (MetricsReply) {}
    rpc Ping(Empty) returns (ErrReply) {}
    rpc Kill(KillArg) returns (ErrReply) {}
    rpc GetConfigPolicy(Empty) returns (GetConfigPolicyReply) {}
}

service Processor {
    rpc Process(PubProcArg) returns (MetricsReply) {}
    rpc Ping(Empty) returns (ErrReply) {}
    rpc Kill(KillArg) returns (ErrReply) {}
    rpc GetConfigPolicy(Empty) returns (GetConfigPolicyReply) {}
}

service Publisher {
    rpc Publish(PubProcArg) returns (ErrReply) {}
    rpc PublishAsStream(stream PubProcArg) returns (ErrReply) {}
    rpc Ping(Empty) returns (ErrReply) {}
    rpc Kill(KillArg) returns (ErrReply) {}
    rpc GetConfigPolicy(Empty) returns (GetConfigPolicyReply) {}
}

service StreamCollector {
    rpc StreamMetrics(stream CollectArg) returns (stream CollectReply) {}
    rpc GetMetricTypes(GetMetricTypesArg) returns (MetricsReply) {}
    rpc Ping(Empty) returns (ErrReply) {}
    rpc Kill(KillArg) returns (ErrReply) {}
    rpc GetConfigPolicy(Empty) returns (GetConfigPolicyReply) {}
}

// Request that can be passed a stream collector
message CollectArg{
    // Request these metrics to be collected on the plugins schedule
    MetricsArg Metrics_Arg = 1;
    // Set Maximum collection duration in ns. The events will be buffered
    // until the max duration is reached and/or the maxMetric buffer amount is
    // reached. 0 means the events will be sent immediately.
    int64 MaxCollectDuration = 2;
    // Set max number of metrics to buffer before forcing sending. Events
    // are sent as soon as MaxMetricsBuffer is reached or MaxCollectDuration
    // is exceeded, whichever happens first. If MaxMetricsBuffer is 0 metrics
    // will be sent immediately. If MaxCollectDuration is set to 0 then
    // maxMetricsBuffer will not be used as metrics will be sent immediately.
    int64 MaxMetricsBuffer = 3;
    // Blob of domain specific info
    bytes Other = 4;
}

// Replies that can be sent from a stream collector
message CollectReply{
    // Reply with metrics
    MetricsReply Metrics_Reply = 1;
    ErrReply Error = 2;
}

message Empty{}

message ErrReply {
    string error = 1;
}

message Time{
    int64 sec = 1;
    int64 nsec = 2;
}

message NamespaceElement {
    string Value = 1;
    string Description = 2;
    string Name = 3;
}

message PubProcArg {
    repeated Metric Metrics = 1;
    ConfigMap Config = 2;
}

// core.Metric
message Metric {
    repeated NamespaceElement Namespace = 1;
    int64 Version = 2;
    ConfigMap Config = 3;
    Time LastAdvertisedTime = 4;
    map<string, string> Tags = 5;
    Time Timestamp = 6;
    string Unit = 7;
    string Description = 8;
    oneof data {
        string string_data = 9;
        float float32_data = 10;
        double float64_data = 11;
        int32 int32_data = 12;
        int64 int64_data = 13;
        bytes bytes_data = 14;
        bool bool_data = 15;
        uint32 uint32_data = 16;
        uint64 uint64_data = 17;
    }
}

message ConfigMap {
    map<string, int64> IntMap = 1;
    map<string, string> StringMap = 2;
    // double is float64
    map<string, double> FloatMap = 3;
    map<string, bool> BoolMap = 4;
}

message KillArg {
    string Reason = 1;
}

message GetConfigPolicyReply {
    string error = 1;
    map<string, BoolPolicy> bool_policy = 2;
    map<string, FloatPolicy> float_policy = 3;
    map<string, IntegerPolicy> integer_policy = 4;
    map<string, StringPolicy> string_policy = 5;
}

message BoolRule {
    bool required = 1;
    bool default = 2;
    bool has_default = 3;
}

message BoolPolicy {
    map<string, BoolRule> rules = 1;
    repeated string key = 2;
}

message FloatRule {
    bool required = 1;
    double minimum = 2;
    double maximum = 3;
    double default = 4;
    bool has_default = 5;
    bool has_min = 6;
    bool has_max = 7;
}

message FloatPolicy {
    map<string, FloatRule> rules = 1;
    repeated string key = 2;
}

message IntegerRule {
    bool required = 1;
    int64 minimum = 2;
    int64 maximum = 3;
    int64 default = 4;
    bool has_default = 5;
    bool has_min = 6;
    bool has_max = 7;
}

message IntegerPolicy {
    map<string, IntegerRule> rules = 1;
    repeated string key = 2;
}

message StringRule {
    bool required = 1;
    string default = 2;
    bool has_default = 3;
}

message StringPolicy {
    map<string,  StringRule> rules = 1;
    repeated string key = 2;
}

message MetricsArg {
    repeated Metric metrics = 1;
}

message MetricsReply {
    repeated Metric metrics = 1;
    string error = 2;
}

message GetMetricTypesArg {
    ConfigMap config = 1;
}
