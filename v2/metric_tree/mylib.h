/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/librato/snap-plugin-lib-go/v2/metric_tree */


#line 1 "cgo-builtin-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

typedef struct { const char *p; ptrdiff_t n; } _GoString_;

#endif

/* Start of preamble from import "C" comments.  */


#line 6 "api_bridge.go"

#include <stdlib.h>

typedef struct namespace_ {
	char * name;
	char * value;
	char * description;
} namespace;

typedef void (*callbackFn)(namespace ns);

static inline void call_c_func(callbackFn fPtr, namespace ns) {
	(fPtr)(ns);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

typedef _GoString_ GoString;
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern void AddDefinition(GoString p0, GoString p1, GoUint8 p2, GoString p3);

extern void AddFilter(GoString p0, GoString p1);

extern void ProcessMetricWithInt(GoString p0, GoString p1, GoInt p2);

extern void Clear(GoString p0);

//func ListMetrics(taskID string, callback C.callbackFn) {

extern void ListMetrics(callbackFn p0);

extern void ListMetricsFilters(GoString p0, callbackFn p1);

extern void ListMetricsDefinition(callbackFn p0);

#ifdef __cplusplus
}
#endif
