/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/librato/snap-plugin-lib-go/v2/plugin-lib */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include <stdlib.h>
#include <stdio.h>
#include <memory.h>
// c types for callbacks
typedef void (callback_t)(char *);  // used for Collect, Load and Unload
typedef void (define_callback_t)(); // used for DefineCallback

// called from Go code
static inline void call_c_callback(callback_t callback, char * ctxId) { callback(ctxId); }
static inline void call_c_define_callback(define_callback_t callback) { callback(); }

// some helpers to manage C/Go memory/access interactions
enum value_type_t {
    TYPE_INVALID,
    TYPE_INT64,
    TYPE_UINT64,
    TYPE_DOUBLE,
    TYPE_BOOL,
};

typedef struct {
    union  {
        long long v_int64;
        unsigned long long v_uint64;
        double v_double;
        int v_bool;
    } value;
    int vtype; // value_type_t;
} value_t;

static inline value_t * alloc_value_t(enum value_type_t t) {
    value_t * valPtr = malloc(sizeof(value_t));
    valPtr->vtype = t;
    return valPtr;
}

static inline long long value_t_long_long(value_t * v) { return v->value.v_int64; }
static inline unsigned long long value_t_ulong_long(value_t * v) { return v->value.v_uint64; }
static inline double value_t_double(value_t * v) { return v->value.v_double; }
static inline int value_t_bool(value_t * v) { return v->value.v_bool; }

static inline void set_long_long_value_t(value_t * v, long long v_int64) { v->value.v_int64 = v_int64; }
static inline void set_ulong_long_value_t(value_t * v, unsigned long long v_uint64) { v->value.v_uint64 = v_uint64; }
static inline void set_double_value_t(value_t * v, double v_double) { v->value.v_double = v_double; }
static inline void set_bool_value_t(value_t * v, int v_bool) { v->value.v_bool = v_bool; }


typedef struct {
    char * key;
    char * value;
} map_element_t;


static inline map_element_t ** map_element_t_array(int size) {
    map_element_t ** arrPtr = malloc(sizeof(map_element_t*) * size);
    int i;
    for(i=0; i<size; i++){
        arrPtr[i] = malloc(sizeof(map_element_t));
    }
    return arrPtr;
 }

static inline void set_tag_values(map_element_t ** tag_arr, int index, char * key, char * value) {
    tag_arr[index]->key = key;
    tag_arr[index]->value = value;
}

typedef struct {
    map_element_t * elements;
    int length;
} map_t;

static inline map_t * alloc_map_t() {
    map_t * map = malloc(sizeof(map_t));
    return map;
}

static inline void set_map_elements(map_t * mapptr, map_element_t** elements) {
    mapptr->elements = *elements;
}

static inline char * get_map_key(map_t * map, int index) { return map->elements[index].key; }
static inline char * get_map_value(map_t * map, int index) { return map->elements[index].value; }
static inline int get_map_length(map_t * map) { return map->length; }


static inline void set_map_lenght(map_t * map, int length) { map->length = length; }


typedef struct {
    char * msg;
} error_t;


static inline error_t * alloc_error_msg(char * msg) {
    error_t * errMsg = malloc(sizeof(error_t));
    errMsg->msg = msg;
    return errMsg;
}

static inline void free_error_msg(error_t * err) {
    if (err == NULL) return;

    if (err->msg != NULL) {
        free(err->msg);
		err->msg = NULL;
    }

	free(err);
}

typedef struct {
    int sec;
    int nsec;
} time_with_ns_t;

static inline time_with_ns_t* alloc_time_with_ns_t() {
    return malloc(sizeof(time_with_ns_t));
}

static inline void set_time_with_ns_t(time_with_ns_t* time_ptr, int sec, int nsec) {
    time_ptr->sec = sec;
    time_ptr->nsec = nsec;
}

typedef struct {
    map_t * tags_to_add;
    map_t * tags_to_remove;
    time_with_ns_t * timestamp;
    char * description;
    char * unit;
} modifiers_t;


static inline char** alloc_str_array(int size) {
    return malloc(sizeof(char*) * size);
}

static inline void free_str_array(char **arr) {
	if (arr == NULL) return;

	char * arrEl = *arr;
	for (;;) {
		if (arrEl == NULL) {
			break;
		}

		free(arrEl);
		arrEl++;
	}

	free(arr);
}

static inline void set_str_array_element(char **str_array, int index, char *element) {
    str_array[index] = element;
}

typedef struct {
    char * el_name;
    char * value;
    char * description;
    int is_dynamic;
} namespace_element_t;


static inline namespace_element_t ** alloc_namespace_elem_arr(int size) {
    namespace_element_t** ne_ptr = malloc(sizeof(namespace_element_t*) * size);
    int i = 0;
    for(i=0; i < size; i++) {
        ne_ptr[i] = malloc(sizeof(namespace_element_t)); 
    }
    return ne_ptr;
}

static inline void set_namespace_element(namespace_element_t ** arr, int index, char * el_name, char * value, char * description, int is_dynamic) {
    arr[index]->el_name = el_name;
    arr[index]->value = value;
    arr[index]->description = description;
    arr[index]->is_dynamic = is_dynamic;
}


typedef struct {
    namespace_element_t * nm_elements;
    int nm_length;
    char * nm_string;
} namespace_t;


static inline namespace_t * alloc_namespace_t() {
    namespace_t* nm_ptr = malloc(sizeof(namespace_t));
    return nm_ptr;
}

static inline void set_namespace_fields(namespace_t* nm_ptr, namespace_element_t ** ne_arr, int nm_length, char * nm_string) {
    namespace_element_t * ne_arr_ptr = *ne_arr;
    nm_ptr->nm_elements = ne_arr_ptr;
    nm_ptr->nm_length = nm_length;
    nm_ptr->nm_string= nm_string;
}

typedef struct {
    namespace_t * mt_namespace; // FIXME na pointer na liste strukturek
    char * mt_description;
    value_t *mt_value; // FIXME free
    time_with_ns_t * timestamp; // FIXME timestampwithns and free
    map_t * tags;
} metric_t;


static inline metric_t** alloc_metric_pointer_array(int size) {
    metric_t ** arrPtr = malloc(sizeof(metric_t*) * size);
    int i;
    for(i=0; i< size; i++) {
        arrPtr[i] = malloc(sizeof(metric_t));
    }
    return arrPtr;
}

static inline void set_metric_pointer_array_element(metric_t** mt_array, int index, metric_t* element) {
    mt_array[index] = element;
}

static inline void set_metric_values(metric_t** mt_array, int index, namespace_t* mt_namespace, char* desc, value_t* val, time_with_ns_t* timestamp, map_t* tags) {
    mt_array[index]->mt_namespace = mt_namespace;
    mt_array[index]->mt_description = desc;
    mt_array[index]->mt_value = val;
    mt_array[index]->timestamp = timestamp;
    mt_array[index]->tags = tags;
}

static inline void free_metric_arr(metric_t** mtArray, int size) {
// FIXME free
    if (mtArray == NULL) return;
    int i;
    for (i=0; i< size; i++) {
       if (mtArray[i] != NULL ) {
           free(mtArray[i]);
       }
   }
   free(mtArray);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern void dealloc_charp(char* p0);

extern void dealloc_str_array(char** p0);

extern void dealloc_error(error_t* p0);

extern void dealloc_metric_array(metric_t** p0, GoInt p1);

extern error_t* ctx_add_metric(char* p0, char* p1, value_t* p2, modifiers_t* p3);

extern error_t* ctx_always_apply(char* p0, char* p1, modifiers_t* p2);

extern void ctx_dismiss_all_modifiers(char* p0);

extern GoInt ctx_should_process(char* p0, char* p1);

extern char** ctx_requested_metrics(char* p0);

extern GoInt ctx_count(char* p0);

extern metric_t** ctx_list_all_metrics(char* p0);

extern char* ctx_config(char* p0, char* p1);

extern char** ctx_config_keys(char* p0);

extern char* ctx_raw_config(char* p0);

extern void ctx_add_warning(char* p0, char* p1);

extern GoInt ctx_is_done(char* p0);

extern void ctx_log(char* p0, int p1, char* p2, map_t* p3);

extern void define_metric(char* p0, char* p1, GoInt p2, char* p3);

extern void define_group(char* p0, char* p1);

extern error_t* define_example_config(char* p0);

extern void define_tasks_per_instance_limit(GoInt p0);

extern void define_instances_limit(GoInt p0);

extern void start_collector(callback_t* p0, callback_t* p1, callback_t* p2, define_callback_t* p3, char* p4, char* p5);

/***************************************************************************/

extern void start_publisher(callback_t* p0, callback_t* p1, callback_t* p2, define_callback_t* p3, char* p4, char* p5);

#ifdef __cplusplus
}
#endif
