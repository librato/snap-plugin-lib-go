/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/librato/snap-plugin-lib-go/v2/plugin-lib */


#line 1 "cgo-builtin-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

typedef struct { const char *p; ptrdiff_t n; } _GoString_;

#endif

/* Start of preamble from import "C" comments.  */


#line 13 "main.go"

#include <stdlib.h>

typedef void (callbackT)(char *); // used for Collect, Load and Unload
typedef void (defineCallbackT)(); // used for DefineCallback

// called from Go code
static inline void CCallback(callbackT callback, char * ctxId) { callback(ctxId); }
static inline void CDefineCallback(defineCallbackT callback) { callback(); }

typedef struct {
	char * key;
	char * value;
} tag;

static inline char * tag_key(tag * tags, int index) { return tags[index].key; }
static inline char * tag_value(tag * tags, int index) { return tags[index].value; }

typedef struct {
	char * msg;
} errorMsg;

static inline char * error_msg_msg(errorMsg * emsg) {
	if (emsg == NULL) {
		return NULL;
	}

	return emsg->msg;
}

static inline errorMsg * alloc_error_msg(char * msg) {
	errorMsg * errMsg = malloc(sizeof(errorMsg));
	errMsg->msg = msg;
	return errMsg;
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

typedef _GoString_ GoString;
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern errorMsg* ctx_add_metric(char* p0, char* p1, GoInt p2);

extern errorMsg* ctx_add_metric_with_tags(char* p0, char* p1, GoInt p2, tag* p3, GoInt p4);

extern errorMsg* ctx_apply_tags_by_path(char* p0, char* p1, tag* p2, GoInt p3);

extern errorMsg* ctx_apply_tags_by_regexp(char* p0, char* p1, tag* p2, GoInt p3);

extern GoInt ctx_should_process(char* p0, char* p1);

extern char* ctx_config(char* p0, char* p1);

extern char* ctx_raw_config(char* p0);

extern void ctx_store(char* p0, char* p1, void* p2);

extern void* ctx_load(char* p0, char* p1);

extern void define_metric(char* p0, char* p1, GoInt p2, char* p3);

extern void define_group(char* p0, char* p1);

extern errorMsg* define_example_config(char* p0);

extern void define_tasks_per_instance_limit(GoInt p0);

extern void define_instances_limit(GoInt p0);

extern void StartCollector(callbackT* p0, callbackT* p1, callbackT* p2, defineCallbackT* p3, char* p4, char* p5);

#ifdef __cplusplus
}
#endif
