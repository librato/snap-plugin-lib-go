syntax = "proto3";
package pluginrpc;

///////////////////////////////////////////////////////////////////////////////
// Services

service Controller {
    rpc Ping (PingRequest) returns (PingResponse);
    rpc Kill (KillRequest) returns (KillResponse);
}

service Collector {
    rpc Collect (CollectRequest) returns (stream CollectResponse);
    rpc Load (LoadCollectorRequest) returns (LoadCollectorResponse);
    rpc Unload (UnloadCollectorRequest) returns (UnloadCollectorResponse);
    rpc Info (InfoRequest) returns (InfoResponse);
}

service Publisher {
    rpc Publish (stream PublishRequest) returns (PublishResponse);
    rpc Load (LoadPublisherRequest) returns (LoadPublisherResponse);
    rpc Unload (UnloadPublisherRequest) returns (UnloadPublisherResponse);
}

///////////////////////////////////////////////////////////////////////////////
// Service Controller definition

message PingRequest {
    // empty
}

message PingResponse {
    // empty
}

message KillRequest {
    // empty
}

message KillResponse {
    // empty
}

///////////////////////////////////////////////////////////////////////////////
// Service Collector definition

message CollectRequest {
    string task_id = 1;
}

message CollectResponse {
    repeated Metric metric_set = 1;
}

message LoadCollectorRequest {
    string task_id = 1;
    bytes json_config = 2;
    repeated string metric_selectors = 3;
}

message LoadCollectorResponse {
    // empty
}

message UnloadCollectorRequest {
    string task_id = 1;
}

message UnloadCollectorResponse {
    // empty
}

message InfoRequest {
}

message InfoResponse {
    Info info = 1;
}

//////////////////////////////////////////////////////////////////////////////
// Service Publisher definition

message PublishRequest {
    string task_id = 1;
    repeated Metric metric_set = 2;
}

message PublishResponse {
    // empty
}

message LoadPublisherRequest {
    string task_id = 1;
    bytes json_config = 2;
}

message LoadPublisherResponse {
    // empty
}

message UnloadPublisherRequest {
    string task_id = 1;
}

message UnloadPublisherResponse {
    // empty
}

///////////////////////////////////////////////////////////////////////////////
// Common messages definition

message Metric {
    repeated Namespace namespace = 1;
    MetricValue value = 2;
    map<string, string> tags = 3;
    Time timestamp = 4;
    string description = 5;
    string unit = 6;
}

message Namespace {
    string name = 1;
    string value = 2;
    string description = 3;
}

message MetricValue {
    oneof data_variant {
        float v_float = 1;
        double v_double = 2;
        int32 v_int32 = 3;
        int64 v_int64 = 4;
        uint32 v_uint32 = 5;
        uint64 v_uint64 = 6;
        bool v_bool = 7;
        bytes v_bytes = 8;
        string v_string = 9;
    }
}

message Time {
    int64 sec = 1;
    int64 nsec = 2;
}

///////////////////////////////////////////////////////////////////////////////
// Info messages definition

message Info {
    PluginInfo pluginInfo = 1;
    TaskSummary taskSummary = 2;
    map<string, TaskDetails> taskDetails = 3;
}

message PluginInfo {
    string name = 1;
    string version = 2;
    string cmdLineOptions = 3;
    Options options = 4;
    Time started = 5;
}

message Options {
    string pluginIP = 1;
    uint32 grpcPort = 2;
    uint32 statsPort = 3;
    int64 grpcPingTimeout = 4;
    uint64 grpcPingMaxMissed = 5;
    uint32 logLevel = 6;
    bool enableProfiling = 7;
    string profilingLocation = 8;
    bool enableStats = 9;
    bool enableStatsServer = 10;
}

message TaskSummary {
    TaskSummaryCounters counters = 1;
    ProcessingTimes processingTimes = 2;
}

message TaskDetails {
    string configuration = 1;
    repeated string filters = 2;
    TaskDetailCounters counters = 3;
    Time loaded = 4;
    ProcessingTimes processingTimes = 5;
    LastMeasurement lastMeasurement = 6;
}

message TaskSummaryCounters {
    uint64 currentlyActiveTasks = 1;
    uint64 totalActiveTasks = 2;
    uint64 totalCollectRequests = 3;
}

message TaskDetailCounters {
    uint64 collectRequests = 1;
    uint64 totalMetrics = 2;
    uint64 averageMetricsPerCollect = 3;
}

message ProcessingTimes {
    int64 total = 1;
    int64 average = 2;
    int64 maximum = 3;
}

message LastMeasurement {
    Time occurred = 1;
    uint64 collectedMetrics = 2;
    int64 duration = 3;
}
